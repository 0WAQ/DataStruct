#include <iostream>
using namespace std;

/**
 *  1. 原地排序算法：空间复杂度为O(1)，是将数组分为两个区间进行排序
 *  2. 稳定排序算法：属于人为选择，可稳定，可不稳定
 *  3. 最好时间复杂度O(n)：数据已有序时，在进入内层循环时便会直接break，所以只需遍历外层
 *  4. 最坏时间复杂度O(n^2)：数据倒序时，每次插入都相当于在数组头插入新数据
 *  5. 平均时间复杂度O(n^2)：相当于在数组中执行n次插入操作
 * 
 *  大致思路：
 *      1. 将数组逻辑上分为两个区间，一个为已排序，另一个为待排序
 *      2. 每次将待排序中的第一个元素依次和已排序的元素进行比较，插入到合适的位置
 *      3. 将插入位置后的元素向后移动一位
 */
void insert_sort(int a[], int n)
{
    // 数组长度为1，无需排序
    if(n <= 1)  return;

    for(int i = 0; i < n; i++)
    {
        int key = a[i]; // 待插入的元素，也是未排序区间的起始元素
        int j = i - 1;   // 利用哨兵进行比较和排序

        // 碰到相等元素时不交换
        while(j >= 0 && a[j] > key) {
            a[j + 1] = a[j];
            j--;
        }

        // 填坑
        a[j + 1] = key;
    }
}

int main()
{
    int a[] = {6, 5, 4, 3, 2, 1};
    int n = sizeof(a) / sizeof(a[0]);

    insert_sort(a, n);

    for(int i = 0; i < n; i++)
        cout << a[i] << ' ';
    cout << endl;
    return 0;
}